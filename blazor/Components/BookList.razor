@using Blazored.LocalStorage
@inject ILocalStorageService storage;
@inject IJSRuntime js;

<div class="book-list">
    <div class="book-list__content content">

        @foreach (var book in this.filtered)
        {
            <div class="book-list__item book @(GetBookStatusClass(book))" title="@book.Name">
                <img class="book__image" src="@book.ImageUrl" />
                <div class="book__info">
                    <p class="book__year">@book.Year</p>
                    <p class="book__name">@book.Name</p>
                    <button class="book__btn btn btn--text @GetButtonColorClass(book)"
                        @onclick="async () => await OnBookPressedAsync(book)">
                        @GetButtonLabel(book)
                    </button>
                </div>
            </div>
        }

    </div>
</div>

@code {
    private List<Book> books = new List<Book>();
    private IEnumerable<Book> filtered => books
      .Where(x => string.IsNullOrWhiteSpace(Search)
        || Search.Length <= 1
        || x.Name.ToLower().Contains(Search.ToLower()))
      .OrderBy(x => x.Name);

    [CascadingParameter(Name = "User")]
    public string User { get; set; }
    [CascadingParameter(Name = "Search")]
    public string Search { get; set; }
    [CascadingParameter(Name = "SearchChanged")]
    public EventCallback SearchChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        books = await storage.GetItemAsync<List<Book>>(nameof(books));

        if (books is null || !books.Any())
        {
            books = defaultBooks.OrderBy(x => x.Name).ToList();
        }
    }

    private async Task OnBookPressedAsync(Book book)
    {
        switch (book.State)
        {
            case BookState.Available: await ReserveAsync(book); break;
            case BookState.Taken when book.Holder == User: await ReleaseAsync(book); break;
            case BookState.Taken when book.Holder != User:
                await AlertAsync($"Книга находится у {book.Holder}.\nЕсли хорошо попросишь, может даст почитать...");
                break;
            default: break;
        }
    }

    private async Task ReserveAsync(Book book)
    {
        books.Remove(book);
        books.Add(book with { Holder = User, State = BookState.Taken });
        await storage.SetItemAsync(nameof(books), books);
    }

    private async Task ReleaseAsync(Book book)
    {
        books.Remove(book);
        books.Add(book with { Holder = null, State = BookState.Available });
        Console.WriteLine($"Book '{book.Name}' released...");
        await storage.SetItemAsync(nameof(books), books);
    }

    private string GetBookStatusClass(Book book) => book.State switch
    {
        BookState.Available => string.Empty,
        BookState.Taken => "book--on-hands",
        BookState.CommmingSoon => "book--soon",
        _ => throw new NotImplementedException()
    };

    private string GetButtonLabel(Book book) => book.State switch
    {
        BookState.Available => "Взять книгу",
        BookState.Taken when book.Holder == User => "Вернуть",
        BookState.Taken when book.Holder != User => "Узнать у кого",
        BookState.CommmingSoon => "Скоро",
        _ => throw new NotImplementedException(book.State.ToString())
    };

    private string GetButtonColorClass(Book book) => book.State switch
    {
        BookState.Available => string.Empty,
        BookState.Taken => "btn--maroon",
        BookState.CommmingSoon => "btn--gray",
        _ => throw new NotImplementedException()
    };

    private async Task AlertAsync(string message) => await js.InvokeVoidAsync("alert", message);

    private record Book(BookState State, int Year, string ImageUrl, string Name, string Holder = null);

    private enum BookState
    {
        Taken,
        Available,
        CommmingSoon
    }

    private static Book[] defaultBooks = new[]
    {
    new Book(BookState.CommmingSoon, 2019, "images/books/CSharp.png", "CLR via C#. Программирование на платформе Microsoft .NET Framework 4.5 на языке C# Рихтер Джеффри | Рихтер Джеффри"),
    new Book(BookState.Taken, 2018, "images/books/Evans_DDD.png", "Предметно-ориентированное проектирование (DDD). Структуризация сложных программных систем | Эванс Эрик", "Тимошинин М.С."),
    new Book(BookState.Taken, 2018, "images/books/Fowler.png", "Шаблоны корпоративных приложений | Ми Роберт, Фаулер Мартин", "Тимошинин М.С."),
    new Book(BookState.Taken, 2018, "images/books/Martin_Arch.png", "Чистая архитектура. Искусство разработки программного обеспечения Мартин Роберт | Мартин Роберт", "Тимошинин М.С."),
    new Book(BookState.Available, 2021, "images/books/Martin_Prog.png", "Идеальный программист. Как стать профессионалом разработки ПО | Мартин Роберт К."),
    new Book(BookState.Available, 2018, "images/books/Vernon_DDD.png", "Реализация методов предметно-ориентированного проектирования | Вернон Вон"),
    };
}